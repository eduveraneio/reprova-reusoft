package br.ufmg.engsoft.reprova.model;

import java.util.Objects;

/**
 * The person type.
 */
public class Person {
  /**
   * The id of the person.
   * When null, the id will be automatically generated by the database.
   */
  public final String id;
  /**
   * The name of the person. Mustn't be null nor empty.
   */
  public final String name;
  /**
   * The email of the person. Mustn't be null nor empty.
   */
  public final String email;
  /**
   * The password of the person. May be null or empty.
   */
  public final String password;
  /**
   * The type of the person. Mustn't be null nor empty.
   */
  public final String type;
  /**
   * The registry of the person. Mustn't be null nor empty.
   */
  public final String regNumber;


  /**
   * Builder for Person.
   */
  public static class Builder {
    protected String id;
    protected String name;
    protected String email;
    protected String password;
    protected String type;
    protected String regNumber;

    public Builder id(String id) {
      this.id = id;
      return this;
    }

    public Builder name(String name) {
      this.name = name;
      return this;
    }

    public Builder email(String email) {
      this.email = email;
      return this;
    }

    public Builder password(String password) {
      this.password = password;
      return this;
    }
    
    public Builder type(String type) {
      this.type = type;
      return this;
    }
    
    public Builder regNumber(String regNumber) {
	  this.regNumber = regNumber;
	  return this;
	}

    /**
     * Build the person.
     * @throws IllegalArgumentException  if any parameter is invalid
     */
    public Person build() {
      if (name == null)
        throw new IllegalArgumentException("name mustn't be null");

      if (name.isEmpty())
        throw new IllegalArgumentException("name mustn't be empty");

      if (email == null)
        throw new IllegalArgumentException("email mustn't be null");

      if (email.isEmpty())
        throw new IllegalArgumentException("email mustn't be empty");
      
      if (password == null)
        throw new IllegalArgumentException("password mustn't be null");

      if (password.isEmpty())
        throw new IllegalArgumentException("password mustn't be empty");
      
      if (type == null)
        throw new IllegalArgumentException("type mustn't be null");

      return new Person(
        this.id,
        this.name,
        this.email,
        this.password,
        this.type,
        this.regNumber
      );
    }
  }

  /**
   * Protected constructor, should only be used by the builder.
   */
  protected Person(
    String id,
    String name,
    String email,
    String password,
    String type,
    String regNumber
  ) {
    this.id = id;
    this.name = name;
    this.email = email;
    this.password = password;
    this.type = type;
    this.regNumber = regNumber;
  }

  /**
   * Equality comparison.
   * Although this object has an id, equality is checked on all fields.
   */
  @Override
  public boolean equals(Object obj) {
    if (obj == this)
      return true;

    if (!(obj instanceof Person))
      return false;

    var person = (Person) obj;

    return this.id.equals(person.id)
        && this.name.equals(person.name)
        && this.email.equals(person.email)
        && this.password.equals(person.password)
        && this.type.equals(person.type)
        && this.regNumber.equals(person.regNumber);
  }


  @Override
  public int hashCode() {
    return Objects.hash(
      this.id,
      this.name,
      this.email,
      this.password,
      this.type,
      this.regNumber
    );
  }


  /**
   * Convert a Person to String for visualization purposes.
   */
  @Override
  public String toString() {
    var builder = new StringBuilder();

    builder.append("Person:\n");
    builder.append("  id: " + this.id + "\n");
    builder.append("  name: " + this.name + "\n");
    builder.append("  email: " + this.email + "\n");
    builder.append("  password: " + this.password + "\n");
    builder.append("  type: " + this.type + "\n");
    builder.append("  regNumber: " + this.regNumber + "\n");
    

    return builder.toString();
  }
}

